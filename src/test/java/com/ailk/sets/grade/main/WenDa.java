package com.ailk.sets.grade.main;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.List;import net.sf.json.JSONObject;import org.apache.commons.lang.StringEscapeUtils;import org.htmlparser.Node;import org.htmlparser.NodeFilter;import org.htmlparser.Parser;import org.htmlparser.util.ParserException;import org.htmlparser.util.SimpleNodeIterator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.ailk.sets.grade.dao.intf.IQbWendaDao;import com.ailk.sets.grade.jdbc.QbWenda;import com.ailk.sets.grade.wenda.QuestionInfo;@Transactional(rollbackFor = Exception.class)@Servicepublic class WenDa {	private static final String BR = "\n";	private static final String GET_URL = "http://wenda60.com/?exam.test/";	private static final String SUBMIT_URL = "http://wenda60.com/?ajax.exam.Test";	// 需要手动粘贴的内容：	private static final String COOKIE = "ssd=mug7l9s7sahnddi9dvj4qa7085; 79e2a722__5e003d40e5112e90f3a3d4s_79e2a7229422cb02c3ef8ddebb10ee4c=a46a09abflzEY8TRIRWgcbDFcHUVZXBk8TEVsNUFcRXkZWHAhScFgFJQhwWzJfJQh0VQEBUVEDUggHAVJmAGQAIEYeGhJADhQIB1NCRglBSl8IUEAZGxMdAVUEVgUJA1RUVEwbHA; Hm_lvt_5e003d40e511bf5aeb58ad6aa7082189=1408404942,1408405443,1408405600,1408406321; Hm_lpvt_5e003d40e511bf5aeb58ad6aa7082189=1408408608; v2_question=false";	@Autowired	private IQbWendaDao qbWendaDao;	public static class BankInfo {		private String bankId;		private String bankName;		public BankInfo(String bankId, String bankName) {			this.bankId = bankId;			this.bankName = bankName;		}	}	public static void main(String[] args) {		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(				new String[] { "/spring/beans.xml", "/spring/localbean.xml" });		context.start();		WenDa instance = context.getBean(WenDa.class);		final List<BankInfo> bankInfos = new ArrayList<BankInfo>();		bankInfos.add(new BankInfo("832ab595flzEY8BAcaEB0JBlYBUlRVAFMBGxcY",				"C"));		bankInfos.add(new BankInfo("7aa36687flzEY8BAgaEB0JBlYBUlRVAFMBGxcY",				"C++"));		bankInfos.add(new BankInfo("156484f2flzEY8DwEaEB0JBlYBUlRVAFMBGxcY",				"C#"));		bankInfos.add(new BankInfo("f89516b6flzEY8BAYaEB0JBlYBUlRVAFMBGxcY",				"JAVA"));		bankInfos.add(new BankInfo("896f6dc5flzEY8BAUaEB0JBlYBUlRVAFMBGxcY",				"PHP"));		bankInfos.add(new BankInfo("30eaa0a6flzEY8DwMaEB0JBlYBUlRVAFMBGxcY",				"MySQL"));		bankInfos.add(new BankInfo("353bf70fflzEY8BAkaEB0JBlYBUlRVAFMBGxcY",				"Python"));		bankInfos.add(new BankInfo("a405792aflzEY8BwFUTUBHBlYBUlRVAFMBVUpFSw",				"Objective-C"));		bankInfos.add(new BankInfo("82122782flzEY8DwFSTUBHBlYBUlRVAFMBVUpFSw",				"腾讯技术校招真题"));		bankInfos.add(new BankInfo("1f243adcflzEY8DwUaEB0JBlYBUlRVAFMBGxcY",				"Photoshop"));		bankInfos.add(new BankInfo("5b1b1531flzEY8BwBRTUBHBlYBUlRVAFMBVUpFSw",				"Dreamweaver"));		bankInfos.add(new BankInfo("6b7e1fd0flzEY8BwBTTUBHBlYBUlRVAFMBVUpFSw",				"Flash"));		bankInfos.add(new BankInfo("f94040c5flzEY8BwBQTUBHBlYBUlRVAFMBVUpFSw",				"Fireworks"));		bankInfos.add(new BankInfo("9158bd98flzEY8DwgaEB0JBlYBUlRVAFMBGxcY",				"Word"));		bankInfos.add(new BankInfo("77b20c1aflzEY8DgcaEB0JBlYBUlRVAFMBGxcY",				"Excel"));		bankInfos.add(new BankInfo("bcfaec8eflzEY8DgYaEB0JBlYBUlRVAFMBGxcY",				"PowerPoint"));		bankInfos.add(new BankInfo("5f59a059flzEY8BQIaEB0JBlYBUlRVAFMBGxcY",				"HTML5"));		bankInfos.add(new BankInfo("da203ee7flzEY8BQAaEB0JBlYBUlRVAFMBGxcY",				"JavaScript"));		bankInfos.add(new BankInfo("7c6fb903flzEY8BwRRTUBHBlYBUlRVAFMBVUpFSw",				"公务员行测"));		bankInfos.add(new BankInfo("8a055dc6flzEY8BwNcTUBHBlYBUlRVAFMBVUpFSw",				"计算机二级考试"));		bankInfos.add(new BankInfo("b87c4989flzEY8BwNdTUBHBlYBUlRVAFMBVUpFSw",				"计算机三级考试"));		bankInfos.add(new BankInfo("b5a0db51flzEY8BwRUTUBHBlYBUlRVAFMBVUpFSw",				"计算机四级考试"));		bankInfos.add(new BankInfo("786d3048flzEY8BQEaEB0JBlYBUlRVAFMBGxcY",				"Linux"));		bankInfos.add(new BankInfo("645e54eaflzEY8DgEaEB0JBlYBUlRVAFMBGxcY",				"Unix"));		bankInfos.add(new BankInfo("56b6ac96flzEY8DgIaEB0JBlYBUlRVAFMBGxcY",				"Windows"));		bankInfos.add(new BankInfo("8c32598dflzEY8BARdTUBHBlYBUlRVAFMBVUpFSw",				"算法与数据结构"));		for (BankInfo bankInfo : bankInfos) {			String tid = bankInfo.bankId;			int rows = 0;			while (true) {				try {					// 访问答题页面					String qContent = readContentFromGet(tid);					if (qContent.contains("重新挑战"))						break;					// 获取页面题目信息					QuestionInfo questionInfo = extractQInfos(qContent);					// 获取正确答案					instance.getCorrectAns(tid, questionInfo);					// 保存到数据库					if (questionInfo.getAnswer() == -1)						break;					instance.saveOrUpdate(bankInfo.bankName, questionInfo);					++rows;					System.out.println(bankInfo.bankName + ": " + rows);				} catch (Exception e) {					e.printStackTrace();					System.out.println("题库：" + bankInfo.bankName);					try {						Thread.sleep(5000);					} catch (Exception e1) {					}				}			}		}		System.exit(1);	}	public void saveOrUpdate(String bankName, QuestionInfo questionInfo) {		QbWenda qbWenda = new QbWenda();		qbWenda.setBankName(bankName);		qbWenda.setQuestionId(questionInfo.getQuestionId());		qbWenda.setTitle(questionInfo.getTitle());		for (int i = 0; i < questionInfo.getOptions().size(); i++) {			String option = questionInfo.getOptions().get(i);			switch (i) {			case 0:				qbWenda.setOption1(option);				break;			case 1:				qbWenda.setOption2(option);				break;			case 2:				qbWenda.setOption3(option);				break;			case 3:				qbWenda.setOption4(option);				break;			case 4:				qbWenda.setOption5(option);				break;			case 5:				qbWenda.setOption6(option);				break;			}		}		qbWenda.setAnswer(questionInfo.getAnswer());		qbWenda.setGrade(questionInfo.getGrade());		qbWenda.setScore(questionInfo.getScore());		qbWenda.setTotal(questionInfo.getTotal());		qbWendaDao.saveOrUpdate(qbWenda);	}	/**	 * 模拟提交答案	 */	public void getCorrectAns(String tid, QuestionInfo questionInfo)			throws IOException {		int index = 0; // 模拟选择A		QbWenda qbWenda = qbWendaDao.getEntity(questionInfo.getQuestionId());		if (qbWenda != null) {			String opposite = null;			switch (qbWenda.getAnswer()) {			case 0:				opposite = qbWenda.getOption1();				break;			case 1:				opposite = qbWenda.getOption2();				break;			case 2:				opposite = qbWenda.getOption3();				break;			case 3:				opposite = qbWenda.getOption4();				break;			case 4:				opposite = qbWenda.getOption5();				break;			case 5:				opposite = qbWenda.getOption6();				break;			}			List<String> options = questionInfo.getOptions();			for (int i = 0; i < options.size(); i++) {				String option = options.get(i);				if (option.equals(opposite)) {					index = i;					break;				}			}		}		StringBuilder submitData = new StringBuilder();		submitData.append("opid=").append(				questionInfo.getOptionIds().get(index));		submitData.append("&tid=").append(tid);		for (int i = 0; i < questionInfo.getOptionIds().size(); i++) {			submitData.append("&opids%5B%5D=").append(					questionInfo.getOptionIds().get(i));		}		String correctInfo = readContentFromPost(submitData.toString());		// 获取正确答案，等级，题目分数，得分		// "data":{"grade":"b","score":-13,"total":10,"credit":0,"upgraded":"","id":"a48033f1flzEY8BwVUBVVHFRgBUlRVAFMBVQRWSxpN"}}		JSONObject cInfo = JSONObject.fromObject(correctInfo);		if (cInfo.getInt("code") == 200) {			JSONObject infoData = cInfo.optJSONObject("data");			if (infoData != null) {				questionInfo.setGrade(infoData.optString("grade"));				questionInfo.setScore(infoData.optDouble("score"));				questionInfo.setTotal(infoData.optDouble("total"));				String correctOptionId = infoData.optString("id");				for (int i = 0; i < questionInfo.getOptionIds().size(); i++) {					if (correctOptionId.equals(questionInfo.getOptionIds().get(							i))) {						questionInfo.setAnswer(i);						break;					}				}			}		}	}	@SuppressWarnings("serial")	public static QuestionInfo extractQInfos(String qContent)			throws ParserException {		final QuestionInfo questionInfo = new QuestionInfo();		Parser parser = new Parser(qContent);		parser.setEncoding("utf8");		parser.extractAllNodesThatMatch(new NodeFilter() {			@Override			public boolean accept(Node node) {				if ("p class=\"exam_info_txt\"".equals(node.getText())) {					// 获取题干					questionInfo							.setTitle(unescape(node.getChildren().toHtml()));				} else if (node.getText().startsWith(						"div class=\"exam_info\" dataid=")) {					// 获取选项					String id = node.getText().substring(							node.getText().indexOf("dataid=\"") + 8,							node.getText().length() - 2);					questionInfo.setQuestionId(id);				} else if (node.getText().startsWith(						"div class=\"exam_select\" dataid=")) {					// 获取选项					String id = node.getText().substring(							node.getText().indexOf("dataid=\"") + 8,							node.getText().length() - 1);					String option = unescape(node.getLastChild()							.getFirstChild().getFirstChild().getChildren()							.toHtml());					questionInfo.getOptionIds().add(id);					questionInfo.getOptions().add(option);				}				return true;			}		});		return questionInfo;	}	public static String getLevel(Node node) {		Node endEm = node.getNextSibling();		if (endEm != null) {			Node bNode = endEm.getNextSibling();			if (bNode != null) {				return bNode.getNextSibling().toPlainTextString();			}		}		return "";	}	public static Node getNextNotBRChild(Node node) {		Node next = null;		if (node == null)			return next;		next = node.getNextSibling();		if (next != null) {			if (!BR.equals(next.toPlainTextString())) {				return next;			} else {				return getNextNotBRChild(next);			}		}		return next;	}	public static Node getFirstNotBRChild(Node node) {		Node child = null;		if (node == null)			return child;		SimpleNodeIterator iter = node.getChildren().elements();		while (iter.hasMoreNodes()) {			child = iter.nextNode();			if (!BR.equals(child.toPlainTextString())) {				break;			}		}		return child;	}	public static String readContentFromGet(String tid) throws IOException {		URL url = new URL(GET_URL + tid);		HttpURLConnection connection = null;		BufferedReader reader = null;		try {			connection = (HttpURLConnection) url.openConnection();			connection.setRequestProperty("Cookie", COOKIE);			connection.connect();			reader = new BufferedReader(new InputStreamReader(					connection.getInputStream()));			StringBuilder lines = new StringBuilder();			String line = null;			while ((line = reader.readLine()) != null) {				lines.append(line.trim());			}			return lines.toString();		} finally {			if (reader != null)				reader.close();			if (connection != null)				connection.disconnect();		}	}	public static String readContentFromPost(String encodedPostData)			throws IOException {		URL url = new URL(SUBMIT_URL);		HttpURLConnection connection = null;		BufferedReader reader = null;		try {			connection = (HttpURLConnection) url.openConnection();			connection.setRequestProperty("Cookie", COOKIE);			connection.setDoOutput(true);			connection.setDoInput(true);			connection.setRequestMethod("POST");			connection.setUseCaches(false);			connection.setRequestProperty("Content-Type",					"application/x-www-form-urlencoded");			DataOutputStream out = new DataOutputStream(					connection.getOutputStream());			out.writeBytes(encodedPostData);			out.flush();			out.close();			reader = new BufferedReader(new InputStreamReader(					connection.getInputStream()));			StringBuilder lines = new StringBuilder();			String line;			while ((line = reader.readLine()) != null) {				lines.append(line);			}			return lines.toString();		} finally {			if (reader != null)				reader.close();			if (connection != null)				connection.disconnect();		}	}	private static String unescape(String data) {		return StringEscapeUtils.unescapeHtml(data).replace((char) (0xA0), ' ');	}}
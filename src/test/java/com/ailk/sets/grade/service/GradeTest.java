package com.ailk.sets.grade.service;

import java.io.File;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.ailk.sets.grade.dao.intf.ICandidateExamQuestionDao;
import com.ailk.sets.grade.dao.intf.IQbQuestionDetailDao;
import com.ailk.sets.grade.grade.common.DebugConfig;
import com.ailk.sets.grade.grade.common.GradeConst;
import com.ailk.sets.grade.grade.config.QuestionContent;
import com.ailk.sets.grade.grade.execute.IGradeExecutorService;
import com.ailk.sets.grade.grade.execute.IGradeScheduler;
import com.ailk.sets.grade.grade.execute.ResultHolder;
import com.ailk.sets.grade.jdbc.CandidateExamQuestion;
import com.ailk.sets.grade.jdbc.CandidateExamQuestionPK;
import com.ailk.sets.grade.jdbc.CandidateTestSubject;
import com.ailk.sets.grade.jdbc.QbQuestionDetail;
import com.ailk.sets.grade.utils.Env;
import com.ailk.sets.grade.utils.QuestionUtils;
import com.google.gson.Gson;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({ "/spring/beans.xml", "/spring/localbean.xml" })
@TransactionConfiguration(defaultRollback = true)
@Transactional(rollbackFor = Exception.class)
public class GradeTest {

	@Autowired
	private IGradeScheduler gradeScheduler;

	@Autowired
	private ICandidateExamQuestionDao candidateExamQuestionDao;

	@Autowired
	private IQbQuestionDetailDao qbQuestionDetailDao;

	@Autowired
	private IGradeExecutorService gradeExecutor;

	@Value("${grade.user.reference.permission}")
	private String referencePermission;

	@Value("${grade.user.candidate.permission}")
	private String candidatePermission;

	private static Gson gson = new Gson();
	private static final int TEST_ID = 121267;

	@Test
	public void execute() {
		long qid = 107046002080007L;

		CandidateExamQuestionPK candidateExamQuestionPK = new CandidateExamQuestionPK();
		candidateExamQuestionPK.setTestId(TEST_ID);
		candidateExamQuestionPK.setQuestionId(qid);
		CandidateExamQuestion candidateExamQuestion = candidateExamQuestionDao
				.get(candidateExamQuestionPK);

		try {
			List<CandidateTestSubject> subjects = gradeExecutor
					.execute(candidateExamQuestion);

			int caseId = 1;
			for (CandidateTestSubject subject : subjects) {
				System.out.println("caseId=" + caseId++);
				System.out.println("score=" + subject.getScore());
				System.out.println("referElapsed=" + subject.getReferElapsed());
				System.out.println("referMemBytes="
						+ subject.getReferMemBytes());
				System.out.println("candElapsed=" + subject.getCandElapsed());
				System.out.println("candMemBytes=" + subject.getCandMemBytes());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testSampleJava() {
		long[] qids = { 107040002080001L, 107040002080002L, 107040002080004L,
				107040002080006L, 107040002080007L, 107040002080009L,
				107040002080010L, 107040002080011L, 107040002080012L,
				107040002080014L, 107040002080015L, 107040002080016L,
				107040002080017L, 107040002080018L, 107040002080019L,
				107040002080020L, 107040002080021L, 107040002080022L,
				107040002080023L, 107040002080024L, 107040002080025L,
				107040003080001L, 107040003080002L, 107040003080004L,
				107040003080005L, 107040003080006L, 107040003080007L,
				107040003080009L, 107040003080010L, 107040003080011L,
				107040003080012L, 107040003080013L, 107040003080014L,
				107040004080001L, 107040004080002L, 107040004080003L,
				107040004080004L, 107040004080005L, 107040004080006L,
				107040009080001L, 107040009080002L, 107040009080003L,
				107040009080004L, 107040009080005L, 107040009080006L,
				107040009080008L, 107040009080010L, 107040009080012L,
				107040009080013L, 107040009080014L, 107040009080015L,
				107040009080016L, 107040009080017L, 107040009080018L,
				107040009080020L, 107040009080021L, 107040009080022L,
				107046002080001L, 107046002080002L, 107046002080004L,
				107046002080006L };
		testSample(qids, GradeConst.MODE_JAVA);
	}

	@Test
	public void testSampleJs() {
		long[] qids = { 107040132080001L, 107040132080002L, 107040132080004L,
				107040132080006L, 107040132080007L, 107040132080009L,
				107040132080010L, 107040132080011L, 107040132080012L,
				107040132080014L, 107040132080015L, 107040132080016L,
				107040132080017L, 107040132080018L, 107040132080019L,
				107040132080020L, 107040132080021L, 107040132080022L,
				107040132080023L, 107040132080024L, 107040132080025L,
				107040133080001L, 107040133080004L, 107040133080005L,
				107040133080006L, 107040133080007L, 107040133080009L,
				107040133080010L, 107040133080011L, 107040133080012L,
				107040133080013L, 107040133080014L, 107040134080001L,
				107040134080002L, 107040134080003L, 107040134080004L,
				107040134080005L, 107040134080006L, 107040139080001L,
				107040139080002L, 107040139080003L, 107040139080004L,
				107040139080005L, 107040139080006L, 107040139080008L,
				107040139080010L, 107040139080012L, 107040139080013L,
				107040139080014L, 107040139080015L, 107040139080016L,
				107040139080017L, 107040139080018L, 107040139080020L,
				107040139080021L, 107040139080022L };
		testSample(qids, GradeConst.MODE_JS);
	}

	@Test
	public void testSamplePhp() {
		long[] qids = { 107046002080007L, 107046002080009L, 107046002080010L,
				107046002080011L, 107046002080012L, 107046002080014L,
				107046002080015L, 107046002080016L, 107046002080017L,
				107046002080018L, 107046002080019L, 107046002080020L,
				107046002080021L, 107046002080022L, 107046002080023L,
				107046002080024L, 107046002080025L, 107046003080001L,
				107046003080004L, 107046003080005L, 107046003080006L,
				107046003080007L, 107046003080009L, 107046003080010L,
				107046003080011L, 107046003080012L, 107046003080013L,
				107046003080014L, 107046004080001L, 107046004080002L,
				107046004080003L, 107046004080004L, 107046004080005L,
				107046004080006L, 107046009080001L, 107046009080002L,
				107046009080003L, 107046009080004L, 107046009080005L,
				107046009080006L, 107046009080008L, 107046009080010L,
				107046009080012L, 107046009080013L, 107046009080014L,
				107046009080015L, 107046009080016L, 107046009080017L,
				107046009080018L, 107046009080020L, 107046009080021L,
				107046009080022L };
		testSample(qids, GradeConst.MODE_PHP);
	}

	@Test
	public void testSampleCpp() {
		long[] qids = { 107041002080001L, 107041002080002L, 107041002080004L,
				107041002080006L, 107041002080007L, 107041002080009L,
				107041002080010L, 107041002080011L, 107041002080012L,
				107041002080014L, 107041002080015L, 107041002080016L,
				107041002080017L, 107041002080018L, 107041002080019L,
				107041002080020L, 107041002080021L, 107041002080022L,
				107041002080023L, 107041002080024L, 107041002080025L,
				107041003080001L, 107041003080004L, 107041003080005L,
				107041003080006L, 107041003080007L, 107041003080009L,
				107041003080010L, 107041003080011L, 107041003080012L,
				107041003080013L, 107041003080014L, 107041004080001L,
				107041004080002L, 107041004080003L, 107041004080004L,
				107041004080005L, 107041004080006L, 107041009080001L,
				107041009080002L, 107041009080003L, 107041009080004L,
				107041009080005L, 107041009080006L, 107041009080008L,
				107041009080010L, 107041009080012L, 107041009080013L,
				107041009080014L, 107041009080015L, 107041009080016L,
				107041009080017L, 107041009080018L, 107041009080020L,
				107041009080021L, 107041009080022L };
		testSample(qids, GradeConst.MODE_CPP);
	}

	@Test
	public void testSampleC() {
		long[] qids = { 107044022080001L, 107044022080002L, 107044022080004L,
				107044022080006L, 107044022080007L, 107044022080009L,
				107044022080010L, 107044022080011L, 107044022080012L,
				107044022080014L, 107044022080015L, 107044022080016L,
				107044022080017L, 107044022080018L, 107044022080019L,
				107044022080020L, 107044022080021L, 107044022080022L,
				107044022080023L, 107044022080024L, 107044022080025L,
				107044023080001L, 107044023080004L, 107044023080005L,
				107044023080006L, 107044023080007L, 107044023080009L,
				107044023080010L, 107044023080011L, 107044023080012L,
				107044023080013L, 107044023080014L, 107044024080001L,
				107044024080002L, 107044024080003L, 107044024080004L,
				107044024080005L, 107044024080006L, 107044029080001L,
				107044029080002L, 107044029080003L, 107044029080004L,
				107044029080005L, 107044029080006L, 107044029080008L,
				107044029080010L, 107044029080012L, 107044029080013L,
				107044029080014L, 107044029080015L, 107044029080016L,
				107044029080017L, 107044029080018L, 107044029080020L,
				107044029080021L, 107044029080022L };
		testSample(qids, GradeConst.MODE_C);
	}

	@Test
	public void testSamplePython() {
		long[] qids = { 107044022080001L, 107044022080002L, 107044022080004L,
				107044022080006L, 107044022080007L, 107044022080009L,
				107044022080010L, 107044022080011L, 107044022080012L,
				107044022080014L, 107044022080015L, 107044022080016L,
				107044022080017L, 107044022080018L, 107044022080019L,
				107044022080020L, 107044022080021L, 107044022080022L,
				107044022080023L, 107044022080024L, 107044022080025L,
				107044023080001L, 107044023080004L, 107044023080005L,
				107044023080006L, 107044023080007L, 107044023080009L,
				107044023080010L, 107044023080011L, 107044023080012L,
				107044023080013L, 107044023080014L, 107044024080001L,
				107044024080002L, 107044024080003L, 107044024080004L,
				107044024080005L, 107044024080006L, 107044029080001L,
				107044029080002L, 107044029080003L, 107044029080004L,
				107044029080005L, 107044029080006L, 107044029080008L,
				107044029080010L, 107044029080012L, 107044029080013L,
				107044029080014L, 107044029080015L, 107044029080016L,
				107044029080017L, 107044029080018L, 107044029080020L,
				107044029080021L, 107044029080022L };
		testSample(qids, GradeConst.MODE_PYTHON);
	}

	@Test
	public void gradeTests() {
		gradeScheduler.gradeTests();
	}

	private void testSample(long[] qids, int mode) {
		try {
			String examRoot = Env.getExamRoot();

			for (long qid : qids) {
				QbQuestionDetail qbQuestionDetail = qbQuestionDetailDao
						.get(qid);
				if (qbQuestionDetail == null)
					continue;

				String qRoot = examRoot + File.separator + TEST_ID
						+ File.separator + qid;

				QuestionContent questionContent = gson.fromJson(
						qbQuestionDetail.getContent(), QuestionContent.class);
				QuestionUtils.save(qRoot, questionContent, null,
						referencePermission, candidatePermission);

				try {
					ResultHolder result = gradeExecutor.testSample(
							GradeConst.STAGE_CANDIDATE, mode, TEST_ID, qid, 0);

					System.out.println("qid=" + qid);
					System.out.println(result.getOut());
					if (result.getErr() != null)
						System.out.println(result.getErr());
				} finally {
					if (!DebugConfig.isKeepTempFiles())
						QuestionUtils.delete(qRoot);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
